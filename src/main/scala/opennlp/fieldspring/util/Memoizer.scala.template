///////////////////////////////////////////////////////////////////////////////
//  Memoizer.scala.template
//
//  Copyright (C) 2011-2014 Ben Wing, The University of Texas at Austin
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
///////////////////////////////////////////////////////////////////////////////

/**
 * IF THIS FILE ENDS WITH .scala, IT'S AUTO-GENERATED FROM
 * Memoizer.scala.template.
 *
 * (Utility memoizers, varied by implementation type.)
 *
 * @author Ben Wing
 */

package opennlp.fieldspring
package util
package memoizer

/**
 * Standard memoizer for mapping values to Ints. Specialization of
 * `Memoizer` for Ints, without boxing or unboxing. Uses
 * TroveHashTableFactory for efficiency. Lowest index returned is always
 * 0, so that indices can be directly used in an array.
 *
 * NOTE: This is *NOT* thread-safe! See FeatureLabelMapper comments for
 * further discussion.
 */
#ifdef OBJECT_MEMOIZE
#define GENTY T
#define TY_MEMOIZER ToIntMemoizer[T]
#elif defined(LONG_MEMOIZE)
#define GENTY Long
#define TY_MEMOIZER LongToIntMemoizer
#elif defined(INT_MEMOIZE)
#define GENTY Int
#define TY_MEMOIZER IntToIntMemoizer
#endif

class TY_MEMOIZER
{
  // Use Trove for fast, efficient hash tables.
  val hashfact = TroveHashTableFactory
  // Alternatively, just use the normal Scala hash tables.
  // val hashfact = ScalaHashTableFactory

  /* The raw indices used in the hash table aren't the same as the
   * external indices because TroveHashTableFactory by default uses 0
   * to indicate that an item wasn't found in an x->int map. So we
   * add 1 to the external index to get the raw index.
   *
   * FIXME: Can we set the not-found item differently, e.g. -1?
   * (Yes but only at object-creation time, and we need to modify
   * trove-scala to allow it to be set, and figure out how to retrieve
   * the DEFAULT_CAPACITY and DEFAULT_LOAD_FACTOR values from Trove,
   * because they must be specified if we are to set the not-found item.)
   */
  type RawIndex = Int
  // Don't set minimum_index to 0. I think this causes problems because
  // TroveHashTableFactory by default returns 0 when an item isn't found
  // in an x->int map.
  // Smallest index returned.
  protected val minimum_raw_index: RawIndex = 1
  protected var next_raw_index: RawIndex = minimum_raw_index
  def number_of_indices = next_raw_index - minimum_raw_index
  def maximum_index = number_of_indices - 1

#ifdef OBJECT_MEMOIZE
  // For replacing items with Ints.  This should save space on 64-bit
  // machines (object pointers are 8 bytes, ints are 4 bytes) and might
  // also speed lookup.
  protected val value_id_map = hashfact.create_object_int_map[T]

  // Map in the opposite direction.
  protected val id_value_map = hashfact.create_int_object_map[T]
#elif defined(LONG_MEMOIZE)
  // For replacing Longs with Ints.
  protected val value_id_map = hashfact.create_long_int_map

  // Map in the opposite direction.
  protected val id_value_map = hashfact.create_int_long_map
#elif defined(INT_MEMOIZE)
  // For replacing Ints with Ints.
  protected val value_id_map = hashfact.create_int_int_map

  // Map in the opposite direction.
  protected val id_value_map = hashfact.create_int_int_map
#endif

  def to_index_if(value: GENTY) = {
    value_id_map.get(value).map(_ - minimum_raw_index)
  }

  def to_index(value: GENTY) = {
    val lookup = to_index_if(value)
    // println("Saw value=%s, index=%s" format (value, lookup))
    lookup match {
      case Some(index) => index
      case None => {
        val newind = next_raw_index
        next_raw_index += 1
        value_id_map(value) = newind
        id_value_map(newind) = value
        newind - minimum_raw_index
      }
    }
  }

  def to_raw(index: Int) = {
    id_value_map(index + minimum_raw_index)
  }
}
